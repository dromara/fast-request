import{_ as i}from"./console-BVTfBumt.js";import{_ as c}from"./addLibrary-kgjSY3xy.js";import{_ as d,e as y,f as e,g as s,j as a,h as l,i as u,r as t,o as B}from"./app-lwDcQkvH.js";const h="/img/script.svg",g="/img/script.png",m="/img/2022.2.3/scriptDonate.png",b={},v={id:"request",tabindex:"-1"},F={class:"header-anchor",href:"#request"},A={id:"response",tabindex:"-1"},C={class:"header-anchor",href:"#response"},f={id:"rfr",tabindex:"-1"},k={class:"header-anchor",href:"#rfr"},D={id:"rfr-request",tabindex:"-1"},q={class:"header-anchor",href:"#rfr-request"},x={id:"rfr-response",tabindex:"-1"},E={class:"header-anchor",href:"#rfr-response"},S={id:"rfr-projectheader",tabindex:"-1"},j={class:"header-anchor",href:"#rfr-projectheader"},R={id:"rfr-apiheader",tabindex:"-1"},H={class:"header-anchor",href:"#rfr-apiheader"},U={id:"rfr-currentprojectname",tabindex:"-1"},J={class:"header-anchor",href:"#rfr-currentprojectname"},N={id:"rfr-currentenvname",tabindex:"-1"},O={class:"header-anchor",href:"#rfr-currentenvname"},w={id:"rfr-currentdomain",tabindex:"-1"},I={class:"header-anchor",href:"#rfr-currentdomain"},L={id:"rfr-currentmodulename",tabindex:"-1"},P={class:"header-anchor",href:"#rfr-currentmodulename"},G={id:"rfr-environment",tabindex:"-1"},_={class:"header-anchor",href:"#rfr-environment"},T={id:"console",tabindex:"-1"},z={class:"header-anchor",href:"#console"},M={id:"_4-springboot-项目中的类调用",tabindex:"-1"},V={class:"header-anchor",href:"#_4-springboot-项目中的类调用"};function K(X,n){const o=t("Badge"),p=t("ColorIcon"),r=t("RouteLink");return B(),y("div",null,[n[23]||(n[23]=e('<p><strong>脚本的作用</strong>: 开发者可以利用 Groovy 脚本来自定义一些逻辑,从而使得 api 更加灵活,例如对参数进行动态加密签名,放入 header,而不是直接写死。脚本包括前置脚本和后置脚本。</p><p><strong>实现技术</strong>: <a href="https://groovy-lang.org/" target="_blank" rel="noopener noreferrer">Groovy</a></p><p>看到 Groovy 不熟悉请<mark>不要慌</mark>,语法和 Java 几乎一致(Java 就是香,手动一个狗头)</p><h2 id="脚本流程图" tabindex="-1"><a class="header-anchor" href="#脚本流程图"><span>脚本流程图</span></a></h2><p><img src="'+h+'" alt="" loading="lazy"></p><h2 id="前置脚本" tabindex="-1"><a class="header-anchor" href="#前置脚本"><span>前置脚本</span></a></h2><p>在执行请求之前执行,可以在这里对请求的参数进行处理,例如加密、签名、动态修改 header 等等。</p><h2 id="后置脚本" tabindex="-1"><a class="header-anchor" href="#后置脚本"><span>后置脚本</span></a></h2><p>在请求执行完成之后执行,可以在这里对响应的结果进行处理,例如提取 token、动态修改 header 等等。</p><h2 id="执行优先级" tabindex="-1"><a class="header-anchor" href="#执行优先级"><span>执行优先级</span></a></h2><p>项目级别前置脚本 &gt; 单 API 前置脚本 -&gt; 项目级别后置脚本 -&gt; 单 API 后置脚本</p><h2 id="测试项目" tabindex="-1"><a class="header-anchor" href="#测试项目"><span>测试项目</span></a></h2><p><a href="https://github.com/kings1990/fast-request-samples" target="_blank" rel="noopener noreferrer">https://github.com/kings1990/fast-request-samples</a></p><h2 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量"><span>内置变量</span></a></h2><div class="hint-container caution"><p class="hint-container-title">注意</p><p>开发者在自己编辑的脚本中,应该注意内置变量已被声明,而不是再去 new 一个 Request 或者 Response 对象,对象名是 request 或者 response,否则可能会造成不可预期的错误</p></div><p>插件底层采用<a href="https://hutool.cn/" target="_blank" rel="noopener noreferrer">hutool</a>的<code>cn.hutool.http.HttpRequest</code>来实现请求的发送</p>',16)),s("h3",v,[s("a",F,[s("span",null,[n[0]||(n[0]=a("request ")),l(o,{text:"2022.2.3️",type:"tip"}),n[1]||(n[1]=a()),l(o,{text:"废弃️",type:"danger"})])])]),n[24]||(n[24]=s("p",null,[a("废弃: "),s("strong",null,[a("使用 "),s("code",null,"rfr.request"),a(" 代替")])],-1)),n[25]||(n[25]=s("ul",null,[s("li",null,"作用: 包含了请求相关的信息,例如 url、header、body、各种参数"),s("li",null,"类型: cn.hutool.http.HttpRequest")],-1)),n[26]||(n[26]=s("p",null,"可以通过修改 request 值来动态调整参数",-1)),s("h3",A,[s("a",C,[s("span",null,[n[2]||(n[2]=a("response ")),l(o,{text:"2022.2.3️",type:"tip"}),n[3]||(n[3]=a()),l(o,{text:"废弃️",type:"danger"})])])]),n[27]||(n[27]=s("p",null,[a("废弃: "),s("strong",null,[a("使用 "),s("code",null,"rfr.response"),a(" 代替")])],-1)),n[28]||(n[28]=s("ul",null,[s("li",null,"作用: 包含了请求响应的信息"),s("li",null,"类型: cn.hutool.http.HttpResponse")],-1)),n[29]||(n[29]=s("p",null,"可以通过 response 值来获取响应的结果",-1)),s("h3",f,[s("a",k,[s("span",null,[n[4]||(n[4]=a("rfr ")),l(o,{text:"2022.2.3️",type:"tip"})])])]),n[30]||(n[30]=s("ul",null,[s("li",null,"作用: 包含了跟插件交互相关的一些属性,用于后期定制")],-1)),s("h4",D,[s("a",q,[s("span",null,[n[5]||(n[5]=a("rfr.request ")),l(o,{text:"2024.1.7️",type:"tip"})])])]),n[31]||(n[31]=s("ul",null,[s("li",null,"作用: 包含了请求相关的信息,例如 url、header、body、各种参数"),s("li",null,"类型: cn.hutool.http.HttpRequest")],-1)),n[32]||(n[32]=s("p",null,"可以通过修改 request 值来动态调整参数",-1)),s("h4",x,[s("a",E,[s("span",null,[n[6]||(n[6]=a("rfr.response ")),l(o,{text:"2024.1.7️",type:"tip"})])])]),n[33]||(n[33]=s("ul",null,[s("li",null,"作用: 包含了请求响应的信息"),s("li",null,"类型: cn.hutool.http.HttpResponse")],-1)),s("h4",S,[s("a",j,[s("span",null,[n[7]||(n[7]=a("rfr.projectHeader ")),l(o,{text:"2022.2.3️",type:"tip"})])])]),n[34]||(n[34]=s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#282c34",color:"#abb2bf"}},[s("pre",{class:"shiki one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"作用: 包含了项目级别头,可以通过修改来动态往UI里面设置值")]),a(`
`),s("span",{class:"line"},[s("span",null,"类型: java.util.LinkedHashMap<String,String>")])])])],-1)),s("h4",R,[s("a",H,[s("span",null,[n[8]||(n[8]=a("rfr.apiHeader ")),l(o,{text:"2022.2.3️",type:"tip"})])])]),n[35]||(n[35]=s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#282c34",color:"#abb2bf"}},[s("pre",{class:"shiki one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"作用: 包含了模块级别头,可以通过修改来动态往UI里面设置值")]),a(`
`),s("span",{class:"line"},[s("span",null,"类型: java.util.LinkedHashMap<String,String>")])])])],-1)),s("h4",U,[s("a",J,[s("span",null,[n[9]||(n[9]=a("rfr.currentProjectName ")),l(o,{text:"2022.2.5️",type:"tip"})])])]),n[36]||(n[36]=s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#282c34",color:"#abb2bf"}},[s("pre",{class:"shiki one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"作用: 当前下拉框选择的项目名")]),a(`
`),s("span",{class:"line"},[s("span",null,"类型: java.lang.String")])])])],-1)),s("h4",N,[s("a",O,[s("span",null,[n[10]||(n[10]=a("rfr.currentEnvName ")),l(o,{text:"2022.2.5️",type:"tip"})])])]),n[37]||(n[37]=s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#282c34",color:"#abb2bf"}},[s("pre",{class:"shiki one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"作用: 当前下拉框选择的环境名称")]),a(`
`),s("span",{class:"line"},[s("span",null,"类型: java.lang.String")])])])],-1)),s("h4",w,[s("a",I,[s("span",null,[n[11]||(n[11]=a("rfr.currentDomain ")),l(o,{text:"2022.3.1️",type:"tip"})])])]),n[38]||(n[38]=s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#282c34",color:"#abb2bf"}},[s("pre",{class:"shiki one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"作用: 当前作用的域名")]),a(`
`),s("span",{class:"line"},[s("span",null,"类型: java.lang.String")])])])],-1)),s("h4",L,[s("a",P,[s("span",null,[n[12]||(n[12]=a("rfr.currentModuleName ")),l(o,{text:"2023.1.3️",type:"tip"})])])]),n[39]||(n[39]=s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#282c34",color:"#abb2bf"}},[s("pre",{class:"shiki one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"作用: 当前API的模块名")]),a(`
`),s("span",{class:"line"},[s("span",null,"类型: java.lang.String")])])])],-1)),s("h4",G,[s("a",_,[s("span",null,[n[13]||(n[13]=a("rfr.environment ")),l(o,{text:"2023.1.8",type:"tip"})])])]),n[40]||(n[40]=e(`<div class="language-" data-highlighter="shiki" data-ext="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>作用: 当前环境的变量</span></span>
<span class="line"><span>类型: java.util.LinkedHashMap&lt;String,String&gt;</span></span></code></pre></div><h2 id="引入第三方-jar" tabindex="-1"><a class="header-anchor" href="#引入第三方-jar"><span>引入第三方 Jar</span></a></h2><div class="hint-container tip"><p class="hint-container-title">内置的 Jar</p><div class="language-" data-highlighter="shiki" data-ext="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>com.alibaba:fastjson:1.2.78</span></span>
<span class="line"><span>cn.hutool:hutool-all:5.8.5</span></span>
<span class="line"><span>com.google.guava:guava:30.1.1-jre</span></span></code></pre></div><p>Jar 的版本会不定期更新,如果发现 bug 请联系作者要求作者升级</p><p>开发者可以利用以上 3 个 Jar 所提供的工具方法,直接在脚本中引用,不需要再依赖第三方的 Jar(hutool 就是香,已经加入许多工具类)</p><p>前往<a href="#demo">Demo</a>查看如何获得<a href="https://www.jetbrains.com/help/idea/auto-completing-code.html" target="_blank" rel="noopener noreferrer">Code completion</a>功能</p></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 引入 jar(maven 形式)</label></li></ul><p>下载 jar 可能会需要花费额外的时间</p><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">@Grab</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;org.apache.commons:commons-lang3:3.12.0&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.lang3.StringUtils</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">String</span><span style="color:#E06C75;"> debug</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> request.</span><span style="color:#61AFEF;">header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;debug&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNotBlank</span><span style="color:#ABB2BF;">(debug)){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //some logic</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 引入 jar(通过本地 jar)</label></li></ul><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//注意此处的file:前缀</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.class.classLoader.</span><span style="color:#61AFEF;">addURL</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#C678DD;"> URL</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file:/path/to/jar&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#E06C75;"> StringUtils</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> Class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;org.apache.commons.lang3.StringUtils&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getDeclaredConstructor</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">newInstance</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">String</span><span style="color:#E06C75;"> debug</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> request.</span><span style="color:#61AFEF;">header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;debug&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">//获取header</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNotBlank</span><span style="color:#ABB2BF;">(debug)){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //some logic</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h2 id="作用范围与顺序" tabindex="-1"><a class="header-anchor" href="#作用范围与顺序"><span>作用范围与顺序</span></a></h2>`,9)),s("p",null,[n[15]||(n[15]=a("分为")),n[16]||(n[16]=s("code",null,"项目级别",-1)),n[17]||(n[17]=a("和")),n[18]||(n[18]=s("code",null,"单API级别",-1)),n[19]||(n[19]=a("，项目全局作用需要点击 ")),l(r,{to:"/guide/features/projectValueConfig.html"},{default:u(()=>[l(p,{icon:"quanjucanshu"}),n[14]||(n[14]=a(" 项目级别全局参数支持"))]),_:1}),n[20]||(n[20]=a(" 进行配置"))]),n[41]||(n[41]=s("p",null,"项目级别将作用项目中所有的 API，单 API 级别只作用于单个 API。",-1)),n[42]||(n[42]=s("p",null,[a("执行顺序："),s("code",null,"项目级别"),a("->"),s("code",null,"单API级别")],-1)),n[43]||(n[43]=s("p",null,[s("img",{src:g,alt:"scriptScope",loading:"lazy"})],-1)),s("h2",T,[s("a",z,[s("span",null,[n[21]||(n[21]=a("Console ")),l(o,{text:"2022.2.5",type:"tip"})])])]),n[44]||(n[44]=e(`<p>Console 帮助开发者打印一些你想要的信息</p><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">console.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;info&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">console.</span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;print info&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">console.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;warn&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">console.</span><span style="color:#61AFEF;">success</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;success&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">console.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><p><img src="`+i+'" alt="console" loading="lazy"></p><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Code completion支持</p><p>在项目中加入如下依赖(如果没有),即可在编辑器脚本中处理针对插件核心类的<a href="https://www.jetbrains.com/help/idea/auto-completing-code.html" target="_blank" rel="noopener noreferrer">Code completion</a>功能(快速导入类(import)、得到方法提示等操作)</p><p><img src="'+c+'" alt="" loading="lazy"></p></div><h3 id="_1-签名参数" tabindex="-1"><a class="header-anchor" href="#_1-签名参数"><span>1. 签名参数</span></a></h3><p>在你的本地新建一个 xxx.groovy 文件,粘贴以下代码,适当修改后,能保证本地可以正常运行,再把代码粘贴到脚本中</p>',7)),s("ul",null,[s("li",null,[l(o,{text:"注意最终脚本需要删除这行代码",type:"danger"})])]),n[45]||(n[45]=e(`<p><s>HttpRequest request = HttpUtil.createPost(&quot;http://localhost:8081/book/add&quot;)</s></p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.core.util.CharsetUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.core.util.StrUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.crypto.digest.DigestUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpRequest</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpUtil</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//脚本逻辑正式开始</span></span>
<span class="line"><span style="color:#C678DD;">String</span><span style="color:#E06C75;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> StrUtil</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">str</span><span style="color:#ABB2BF;">(request.</span><span style="color:#61AFEF;">bodyBytes</span><span style="color:#ABB2BF;">(), </span><span style="color:#C678DD;">CharsetUtil</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">CHARSET_UTF_8</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">body </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;xxxx&quot;</span><span style="color:#7F848E;font-style:italic;">//just for test</span></span>
<span class="line"><span style="color:#C678DD;">String</span><span style="color:#E06C75;"> sign</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> DigestUtil</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">md5Hex</span><span style="color:#ABB2BF;">(body)</span></span>
<span class="line"><span style="color:#ABB2BF;">request.</span><span style="color:#61AFEF;">header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sign&quot;</span><span style="color:#ABB2BF;">,sign)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-利用某一个请求的响应充当请求的-header-参数" tabindex="-1"><a class="header-anchor" href="#_2-利用某一个请求的响应充当请求的-header-参数"><span>2. 利用某一个请求的响应充当请求的 Header 参数</span></a></h3><p>注意获取 token 的逻辑得结合接口返回的数据结构来处理。例如返回</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;success&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;code&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;data&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;token&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxx&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><p>则需要这么写 <code>JSON.parseObject(myResponse.body()).getJSONObject(&quot;data&quot;).getString(&quot;token&quot;)</code></p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.core.util.CharsetUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.core.util.StrUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.crypto.digest.DigestUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpRequest</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpResponse</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> com.alibaba.fastjson.JSON</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">HttpRequest</span><span style="color:#E06C75;"> myRequest</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> HttpUtil</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createPost</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:8081/api/v1.0/login&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">HttpResponse</span><span style="color:#E06C75;"> myResponse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> myRequest.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(myResponse.</span><span style="color:#61AFEF;">isOk</span><span style="color:#ABB2BF;">()){</span></span>
<span class="line"><span style="color:#C678DD;">    String</span><span style="color:#ABB2BF;"> token </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseObject</span><span style="color:#ABB2BF;">(myResponse.</span><span style="color:#61AFEF;">body</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">getString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;token&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    request.</span><span style="color:#61AFEF;">header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;token&quot;</span><span style="color:#ABB2BF;">,token)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-设置一个environment变量" tabindex="-1"><a class="header-anchor" href="#_3-设置一个environment变量"><span>3. 设置一个Environment变量</span></a></h3><p>假定响应报文格式</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;success&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;code&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;data&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;token&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxx&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><p>在后置脚本中植入以下代码</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.core.util.CharsetUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.core.util.StrUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.crypto.digest.DigestUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpRequest</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpResponse</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> cn.hutool.http.HttpUtil</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> com.alibaba.fastjson.JSON</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">HttpRequest</span><span style="color:#E06C75;"> myRequest</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> HttpUtil</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createPost</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:8081/api/v1.0/login&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">HttpResponse</span><span style="color:#E06C75;"> myResponse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> myRequest.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(myResponse.</span><span style="color:#61AFEF;">isOk</span><span style="color:#ABB2BF;">()){</span></span>
<span class="line"><span style="color:#C678DD;">    String</span><span style="color:#ABB2BF;"> token </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseObject</span><span style="color:#ABB2BF;">(myResponse.</span><span style="color:#61AFEF;">body</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">getJSONObject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;data&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;token&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    rfr.environment.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;token&quot;</span><span style="color:#ABB2BF;">,token)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),s("h3",M,[s("a",V,[s("span",null,[n[22]||(n[22]=a("4.SpringBoot 项目中的类调用 ")),l(o,{text:"2025.1.4️",type:"tip"})])])]),n[46]||(n[46]=e(`<div class="language-groovy" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#E06C75;"> XxxUtil</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> FrLocalClassLoader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path/to/classes&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">loadClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;some.package.XxxUtil&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><p>SpringBoot 项目编译后会在模块 target 目录下生成一个 classes 目录。使用 <code>FrLocalClassLoader</code> 可以加载这个目录下的类,并且可以直接调用类中的方法。</p><p>注意需要将 <code>path/to/classes</code> 替换成 classes 目录的绝对路径，将 <code>some.package.XxxUtil</code> 替换成你要调用的类的全名。</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h2><ul><li>Groovy 脚本对 <mark>;</mark> 不敏感,Java 用;作为语句代码的结束,Groovy 用换行表示一句代码的结束</li><li>内置变量已被申明,例如 Demo2 中需要额外新建一个请求,变量命名需要注意不能与内置变量相同</li></ul><h2 id="脚本投稿" tabindex="-1"><a class="header-anchor" href="#脚本投稿"><span>脚本投稿 🌟</span></a></h2><p>为了将脚本做的更加强大,评论区开放社区脚本投递,欢迎将强大脚本通过<strong>下方留言</strong> 的形式上报,让更多人使用你开发的脚本</p><ul><li>格式</li></ul><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 作者:Kings</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 主页:https://github.com/kings1990</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 功能:xxxxx</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//脚本内容</span></span>
<span class="line"><span style="color:#ABB2BF;">....</span></span></code></pre></div><p><img src="`+m+'" alt="scriptDonate" loading="lazy"></p>',10))])}const Y=d(b,[["render",K],["__file","script.html.vue"]]),$=JSON.parse('{"path":"/guide/script.html","title":"脚本","lang":"zh-CN","frontmatter":{"title":"脚本","icon":"code-box-fill","headerDepth":4,"description":"脚本的作用: 开发者可以利用 Groovy 脚本来自定义一些逻辑,从而使得 api 更加灵活,例如对参数进行动态加密签名,放入 header,而不是直接写死。脚本包括前置脚本和后置脚本。 实现技术: Groovy 看到 Groovy 不熟悉请不要慌,语法和 Java 几乎一致(Java 就是香,手动一个狗头) 脚本流程图 前置脚本 在执行请求之前执行,...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://api-buddy.com/en/guide/script.html"}],["meta",{"property":"og:url","content":"https://api-buddy.com/guide/script.html"}],["meta",{"property":"og:site_name","content":"Fast Request"}],["meta",{"property":"og:title","content":"脚本"}],["meta",{"property":"og:description","content":"脚本的作用: 开发者可以利用 Groovy 脚本来自定义一些逻辑,从而使得 api 更加灵活,例如对参数进行动态加密签名,放入 header,而不是直接写死。脚本包括前置脚本和后置脚本。 实现技术: Groovy 看到 Groovy 不熟悉请不要慌,语法和 Java 几乎一致(Java 就是香,手动一个狗头) 脚本流程图 前置脚本 在执行请求之前执行,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://api-buddy.com/img/script.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-28T01:23:56.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-28T01:23:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"脚本\\",\\"image\\":[\\"https://api-buddy.com/img/script.svg\\",\\"https://api-buddy.com/img/script.png\\",\\"https://api-buddy.com/img/2022.2.5/console.png\\",\\"https://api-buddy.com/img/2024.1.5/addLibrary.png\\",\\"https://api-buddy.com/img/2022.2.3/scriptDonate.png\\"],\\"dateModified\\":\\"2025-04-28T01:23:56.000Z\\",\\"author\\":[]}"]]},"git":{"createdTime":1717147459000,"updatedTime":1745803436000,"contributors":[{"name":"Kings","username":"Kings","email":"963987632@qq.com","commits":3,"url":"https://github.com/Kings"},{"name":"kings","username":"kings","email":"963987632@qq.com","commits":1,"url":"https://github.com/kings"},{"name":"Mr.Hope","username":"Mr.Hope","email":"mister-hope@outlook.com","commits":1,"url":"https://github.com/Mr.Hope"}]},"readingTime":{"minutes":5.49,"words":1648},"filePathRelative":"guide/script.md","localizedDate":"2024年5月31日","autoDesc":true}');export{Y as comp,$ as data};
