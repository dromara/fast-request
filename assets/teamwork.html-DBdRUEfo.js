import{_ as d}from"./refreshProjectConfig-BwiCzY9v.js";import{_ as g,a as m}from"./transferData-3Hz9rl_T.js";import{_ as c,e as u,g as t,f as h,h as a,j as e,i as s,r as i,o as y}from"./app-lwDcQkvH.js";const f="/img/2023.1.3/teamDirectory.png",b={};function A(C,o){const l=i("Badge"),p=i("CodeTabs");return y(),u("div",null,[t("p",null,[o[0]||(o[0]=e("版本要求: ")),a(l,{text:"2023.1.3"})]),o[13]||(o[13]=t("h2",{id:"原理",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#原理"},[t("span",null,"原理")])],-1)),o[14]||(o[14]=t("p",null,[e("基于版本控制系统，共享"),t("strong",null,"部分配置"),e("以及"),t("strong",null,"API 数据"),e("。")],-1)),o[15]||(o[15]=t("h2",{id:"特性",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#特性"},[t("span",null,"特性")])],-1)),t("ul",null,[t("li",null,[a(l,{bgColor:"#fe2857"},{default:s(()=>o[1]||(o[1]=[e("零部署")])),_:1})]),t("li",null,[a(l,{bgColor:"#087CFA"},{default:s(()=>o[2]||(o[2]=[e("私有化")])),_:1})]),t("li",null,[a(l,{bgColor:"#FE2857"},{default:s(()=>o[3]||(o[3]=[e("不限人数")])),_:1})]),t("li",null,[a(l,{bgColor:"#FC801D"},{default:s(()=>o[4]||(o[4]=[e("不限 API 数")])),_:1})]),t("li",null,[a(l,{bgColor:"#6B57FF"},{default:s(()=>o[5]||(o[5]=[e("不限项目数")])),_:1})]),t("li",null,[a(l,{bgColor:"#3DEA62"},{default:s(()=>o[6]||(o[6]=[e("不限功能")])),_:1})]),t("li",null,[a(l,{bgColor:"#FDB60D"},{default:s(()=>o[7]||(o[7]=[e("离线运转")])),_:1})]),t("li",null,[a(l,{bgColor:"#21D789"},{default:s(()=>o[8]||(o[8]=[e("安全")])),_:1})])]),o[16]||(o[16]=h('<h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h2><p>基于原理，所以当我们需要共享或者拉取别人的配置或者 API 时，假设我们利用 Git 作为我们的版本控制系统，我们只需要<strong>push</strong>即可共享配置和 API 数据，<strong>pull</strong>即可获取别人提交的配置和 API 数据。</p><h3 id="更新配置" tabindex="-1"><a class="header-anchor" href="#更新配置"><span>更新配置</span></a></h3><p>版本控制系统 pull 后，例如 <code>Git pull</code>，点击刷新项目配置按钮，即可获取其他成员提交的配置</p><p><img src="'+d+'" alt="refreshProjectConfig" loading="lazy"></p><h2 id="更新-api" tabindex="-1"><a class="header-anchor" href="#更新-api"><span>更新 API</span></a></h2><p>版本控制系统 pull 后，例如 <code>Git pull</code>，点击 API 刷新按钮，即可获取其他成员提交的 API</p><p><img src="'+g+'" alt="refreshProjectConfig" loading="lazy"></p><h2 id="本地文件存储结构" tabindex="-1"><a class="header-anchor" href="#本地文件存储结构"><span>本地文件存储结构</span></a></h2><p>插件会默认在项目根目录下创建一个 <strong>.fastRequest</strong> 的目录，API 存储在 <strong>collections</strong> 目录下，配置存储在 <strong>config</strong> 目录下，API 按照 <code>模块-&gt;类名-&gt;API</code> 的结构进行存储，每一个目录下存放一个 <strong>directory.json</strong> 文件，用于标识该目录。 其他 API 用方法的<strong>方法名.rapi</strong>进行存储，该文件可能会在版本控制系统中因为多方修改产生冲突，最终需要用户解决冲突，并满足标准的 json 以及数据结构。</p><p><img src="'+f+'" alt="teamDirectory" loading="lazy"></p><h2 id="历史数据转移" tabindex="-1"><a class="header-anchor" href="#历史数据转移"><span>历史数据转移</span></a></h2><p>插件默认会进行一次历史数据转移，数据转移的时候(版本&lt;=2023.1.3 的数据)，如果你的数据在<strong>版本管理系统</strong>上未提交，则不需要关心历史数据。 如果版本管理系统其他人已提交 API，则会进行覆盖。 注意如果想看 API 历史数据，可以结合<strong>版本控制系统</strong>的文件<strong>历史记录</strong>来还原，也可以结合<strong>本地文件历史记录</strong>来还原。</p><p>如果发现数据未转移，也可手动操作！</p><p><img src="'+m+'" alt="transferData" loading="lazy"></p><h2 id="文件权限" tabindex="-1"><a class="header-anchor" href="#文件权限"><span>文件权限</span></a></h2><p>如果发现因为<code>Permission denied</code>导致的错误，执行以下指令</p>',17)),a(p,{id:"97",data:[{id:"Linux"},{id:"Windows"}],"tab-id":"shell"},{title0:s(({value:r,isActive:n})=>o[9]||(o[9]=[e("Linux")])),title1:s(({value:r,isActive:n})=>o[10]||(o[10]=[e("Windows")])),tab0:s(({value:r,isActive:n})=>o[11]||(o[11]=[t("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash",style:{"background-color":"#282c34",color:"#abb2bf"}},[t("pre",{class:"shiki one-dark-pro vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#56B6C2"}},"cd"),t("span",{style:{color:"#ABB2BF"}}," [current "),t("span",{style:{color:"#98C379"}},"project"),t("span",{style:{color:"#98C379"}}," root"),t("span",{style:{color:"#98C379"}}," dir]")]),e(`
`),t("span",{class:"line"},[t("span",{style:{color:"#61AFEF"}},"chmod"),t("span",{style:{color:"#D19A66"}}," -R"),t("span",{style:{color:"#D19A66"}}," 777"),t("span",{style:{color:"#98C379"}}," .fastRequest/"),t("span",{style:{color:"#E5C07B"}},"*")])])])],-1)])),tab1:s(({value:r,isActive:n})=>o[12]||(o[12]=[t("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash",style:{"background-color":"#282c34",color:"#abb2bf"}},[t("pre",{class:"shiki one-dark-pro vp-code"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#56B6C2"}},"cd"),t("span",{style:{color:"#ABB2BF"}}," [current "),t("span",{style:{color:"#98C379"}},"project"),t("span",{style:{color:"#98C379"}}," root"),t("span",{style:{color:"#98C379"}}," dir]")]),e(`
`),t("span",{class:"line"},[t("span",{style:{color:"#61AFEF"}},"takeown"),t("span",{style:{color:"#98C379"}}," /f"),t("span",{style:{color:"#98C379"}}," /r"),t("span",{style:{color:"#98C379"}}," /d"),t("span",{style:{color:"#98C379"}}," n"),t("span",{style:{color:"#98C379"}}," .fastRequest/"),t("span",{style:{color:"#E5C07B"}},"*")])])])],-1)])),_:1})])}const x=c(b,[["render",A],["__file","teamwork.html.vue"]]),B=JSON.parse('{"path":"/guide/teamwork.html","title":"团队协作","lang":"zh-CN","frontmatter":{"title":"团队协作","icon":"teamwork","description":"版本要求: 原理 基于版本控制系统，共享部分配置以及API 数据。 特性 如何使用 基于原理，所以当我们需要共享或者拉取别人的配置或者 API 时，假设我们利用 Git 作为我们的版本控制系统，我们只需要push即可共享配置和 API 数据，pull即可获取别人提交的配置和 API 数据。 更新配置 版本控制系统 pull 后，例如 Git pull，...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://api-buddy.com/en/guide/teamwork.html"}],["meta",{"property":"og:url","content":"https://api-buddy.com/guide/teamwork.html"}],["meta",{"property":"og:site_name","content":"Fast Request"}],["meta",{"property":"og:title","content":"团队协作"}],["meta",{"property":"og:description","content":"版本要求: 原理 基于版本控制系统，共享部分配置以及API 数据。 特性 如何使用 基于原理，所以当我们需要共享或者拉取别人的配置或者 API 时，假设我们利用 Git 作为我们的版本控制系统，我们只需要push即可共享配置和 API 数据，pull即可获取别人提交的配置和 API 数据。 更新配置 版本控制系统 pull 后，例如 Git pull，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://api-buddy.com/img/2023.1.3/refreshProjectConfig.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-15T11:00:59.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-15T11:00:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"团队协作\\",\\"image\\":[\\"https://api-buddy.com/img/2023.1.3/refreshProjectConfig.png\\",\\"https://api-buddy.com/img/2023.1.3/refreshAPI.png\\",\\"https://api-buddy.com/img/2023.1.3/teamDirectory.png\\",\\"https://api-buddy.com/img/2023.1.3/transferData.png\\"],\\"dateModified\\":\\"2024-12-15T11:00:59.000Z\\",\\"author\\":[]}"]]},"git":{"createdTime":1717147459000,"updatedTime":1734260459000,"contributors":[{"name":"Kings","username":"Kings","email":"963987632@qq.com","commits":1,"url":"https://github.com/Kings"},{"name":"Mister-Hope","username":"Mister-Hope","email":"mister-hope@outlook.com","commits":1,"url":"https://github.com/Mister-Hope"}]},"readingTime":{"minutes":1.99,"words":598},"filePathRelative":"guide/teamwork.md","localizedDate":"2024年5月31日","autoDesc":true}');export{x as comp,B as data};
